{
    "language": "Solidity",
    "sources": {
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.7;\nimport \"./PriceConverter.sol\";\n\nerror notOwner();\n\ncontract FundMe{\n\n    using PriceConverter for uint256;\n\n    uint256 public constant minimunUsd = 50 * 1e18;// use constant can save some gas fee\n\n    address[] public funders;\n    mapping (address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner;// use immutable can save some gas fee\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    modifier onlyOwner{\n        // require(msg.sender == i_owner,\"U R NOT THE OWNER!\");\n        if(msg.sender != i_owner){ revert notOwner(); }// use this can save some gas fee\n        _;\n    }\n\n    function fund() public payable {\n        require (msg.value.getConversionRate(priceFeed) >= minimunUsd,\"Didn't send enough !\");\n        addressToAmountFunded[msg.sender] += msg.value;\n        funders.push(msg.sender);\n    }\n\n    function withdraw() public onlyOwner{\n        for(uint256 funderIndex = 0;funderIndex < funders.length;funderIndex++){\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // bool sendSuc = payable(msg.sender).send(address(this).balance);\n        // require(sendSuc,\"Failed\");\n\n        (bool sendSuc, ) = payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(sendSuc,\"Failed\");\n    }\n\n    receive() payable external{\n        fund();\n    }\n\n    fallback() payable external{\n        fund();\n    }  \n\n}"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter{\n\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\n        return uint256(price * 1e10);\n    }\n\n    // function getVersion() internal view returns (uint256) {\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n    //     return priceFeed.version();\n    // }\n\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18;\n        return ethAmountInUsd;\n    }\n\n}"
        },
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
