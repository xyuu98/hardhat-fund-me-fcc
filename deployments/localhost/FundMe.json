{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe_notOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "fundingAddress",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "minimunUsd",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x461131b2290a60ba38b3b334e768617c15c3bff7e330fcd27c4aef772860cf05",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1041118",
        "logsBloom": "0x
        "blockHash": "0xbd0765bbedb3e2232b372363efb009b6ff9e97c63a9b9150658a4c20299fd0ee",
        "transactionHash": "0x461131b2290a60ba38b3b334e768617c15c3bff7e330fcd27c4aef772860cf05",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1041118",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "59480eda6c7238c452bd11c617384430",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_notOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimunUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe_notOwner();\\n\\ncontract FundMe{\\n\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant minimunUsd = 1 * 1e18;// use constant can save some gas fee\\n\\n    address[] private s_funders;\\n    mapping (address => uint256) private s_addressToAmountFunded;\\n\\n    address private immutable i_owner;// use immutable can save some gas fee\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    modifier onlyOwner{\\n        // require(msg.sender == i_owner,\\\"U R NOT THE OWNER!\\\");\\n        if(msg.sender != i_owner){ revert FundMe_notOwner(); }// use this can save some gas fee\\n        _;\\n    }\\n\\n    function fund() public payable {\\n        require (msg.value.getConversionRate(s_priceFeed) >= minimunUsd,\\\"U need to send more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner{\\n        for(uint256 funderIndex = 0;funderIndex < s_funders.length;funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // bool sendSuc = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuc,\\\"Failed\\\");\\n\\n        (bool sendSuc, ) = payable(msg.sender).call{value:address(this).balance}(\\\"\\\");\\n        require(sendSuc,\\\"Failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner{\\n        address[] memory funders = s_funders;\\n\\n        for(uint256 funderIndex = 0;funderIndex < funders.length;funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool sendSuc, ) = payable(msg.sender).call{value:address(this).balance}(\\\"\\\");\\n        require(sendSuc,\\\"Failed\\\");\\n\\n    }\\n\\n     function getAddressToAmountFunded(address fundingAddress) public view returns (uint256){\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    // function getVersion() public view returns (uint256) {\\n    //     return s_priceFeed.version();\\n    // }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    receive() payable external{\\n        fund();\\n    }\\n\\n    fallback() payable external{\\n        fund();\\n    }  \\n\\n}\",\"keccak256\":\"0x57482c3a8af56aae19edcfa0f0a256db3a7ed740e50591779deed08ace797a5d\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter{\\n\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(price * 1e10);\\n    }\\n\\n    // function getVersion() internal view returns (uint256) {\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n\\n}\",\"keccak256\":\"0x52208b9eb807034633b9f89af2c4077b41fc8d425781fac4a0f336f5d5d9ef96\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012f7380380620012f7833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111786200017f600039600081816103430152818161058501526105d501526111786000f3fe60806040526004361061007f5760003560e01c8063b60d42881161004e578063b60d428814610142578063be2693f01461014c578063d7b4750c14610156578063e5e18b1a146101935761008e565b80630343fb25146100985780633ccfd60b146100d5578063893d20e8146100ec5780639e87a5cd146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ab0565b6102f8565b6040516100cc9190610af6565b60405180910390f35b3480156100e157600080fd5b506100ea610341565b005b3480156100f857600080fd5b50610101610581565b60405161010e9190610b20565b60405180910390f35b34801561012357600080fd5b5061012c6105a9565b6040516101399190610b9a565b60405180910390f35b61014a6101be565b005b6101546105d3565b005b34801561016257600080fd5b5061017d60048036038101906101789190610be1565b610877565b60405161018a9190610b20565b60405180910390f35b34801561019f57600080fd5b506101a86108be565b6040516101b59190610af6565b60405180910390f35b670de0b6b3a76400006101fc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ca90919063ffffffff16565b101561023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023490610c6b565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028c9190610cba565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c6576040517fd72551ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104715760008082815481106103eb576103ea610d10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046990610d3f565b9150506103c9565b50600067ffffffffffffffff81111561048d5761048c610d88565b5b6040519080825280602002602001820160405280156104bb5781602001602082028036833780820191505090505b50600090805190602001906104d19291906109a6565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f890610de8565b60006040518083038185875af1925050503d8060008114610535576040519150601f19603f3d011682016040523d82523d6000602084013e61053a565b606091505b505090508061057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590610e49565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610658576040517fd72551ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106db57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610691575b5050505050905060005b815181101561076657600082828151811061070357610702610d10565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075e90610d3f565b9150506106e5565b50600067ffffffffffffffff81111561078257610781610d88565b5b6040519080825280602002602001820160405280156107b05781602001602082028036833780820191505090505b50600090805190602001906107c69291906109a6565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ed90610de8565b60006040518083038185875af1925050503d806000811461082a576040519150601f19603f3d011682016040523d82523d6000602084013e61082f565b606091505b5050905080610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086a90610e49565b60405180910390fd5b5050565b600080828154811061088c5761088b610d10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b670de0b6b3a764000081565b6000806108d683610906565b90506000670de0b6b3a764000082866108ef9190610e69565b6108f99190610ef2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094f57600080fd5b505afa158015610963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109879190610fb0565b5050509150506402540be4008161099e919061102b565b915050919050565b828054828255906000526020600020908101928215610a1f579160200282015b82811115610a1e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c6565b5b509050610a2c9190610a30565b5090565b5b80821115610a49576000816000905550600101610a31565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7d82610a52565b9050919050565b610a8d81610a72565b8114610a9857600080fd5b50565b600081359050610aaa81610a84565b92915050565b600060208284031215610ac657610ac5610a4d565b5b6000610ad484828501610a9b565b91505092915050565b6000819050919050565b610af081610add565b82525050565b6000602082019050610b0b6000830184610ae7565b92915050565b610b1a81610a72565b82525050565b6000602082019050610b356000830184610b11565b92915050565b6000819050919050565b6000610b60610b5b610b5684610a52565b610b3b565b610a52565b9050919050565b6000610b7282610b45565b9050919050565b6000610b8482610b67565b9050919050565b610b9481610b79565b82525050565b6000602082019050610baf6000830184610b8b565b92915050565b610bbe81610add565b8114610bc957600080fd5b50565b600081359050610bdb81610bb5565b92915050565b600060208284031215610bf757610bf6610a4d565b5b6000610c0584828501610bcc565b91505092915050565b600082825260208201905092915050565b7f55206e65656420746f2073656e64206d6f726520455448210000000000000000600082015250565b6000610c55601883610c0e565b9150610c6082610c1f565b602082019050919050565b60006020820190508181036000830152610c8481610c48565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc582610add565b9150610cd083610add565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d0557610d04610c8b565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d4a82610add565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7d57610d7c610c8b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dd2600083610db7565b9150610ddd82610dc2565b600082019050919050565b6000610df382610dc5565b9150819050919050565b7f4661696c65640000000000000000000000000000000000000000000000000000600082015250565b6000610e33600683610c0e565b9150610e3e82610dfd565b602082019050919050565b60006020820190508181036000830152610e6281610e26565b9050919050565b6000610e7482610add565b9150610e7f83610add565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eb857610eb7610c8b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610efd82610add565b9150610f0883610add565b925082610f1857610f17610ec3565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4281610f23565b8114610f4d57600080fd5b50565b600081519050610f5f81610f39565b92915050565b6000819050919050565b610f7881610f65565b8114610f8357600080fd5b50565b600081519050610f9581610f6f565b92915050565b600081519050610faa81610bb5565b92915050565b600080600080600060a08688031215610fcc57610fcb610a4d565b5b6000610fda88828901610f50565b9550506020610feb88828901610f86565b9450506040610ffc88828901610f9b565b935050606061100d88828901610f9b565b925050608061101e88828901610f50565b9150509295509295909350565b600061103682610f65565b915061104183610f65565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110805761107f610c8b565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110bd576110bc610c8b565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110fa576110f9610c8b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561113757611136610c8b565b5b82820290509291505056fea264697066735822122019620283acc0523aa7cf86bc5b25720630a290f60c271c173c184a3ab6a79f2564736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063b60d42881161004e578063b60d428814610142578063be2693f01461014c578063d7b4750c14610156578063e5e18b1a146101935761008e565b80630343fb25146100985780633ccfd60b146100d5578063893d20e8146100ec5780639e87a5cd146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ab0565b6102f8565b6040516100cc9190610af6565b60405180910390f35b3480156100e157600080fd5b506100ea610341565b005b3480156100f857600080fd5b50610101610581565b60405161010e9190610b20565b60405180910390f35b34801561012357600080fd5b5061012c6105a9565b6040516101399190610b9a565b60405180910390f35b61014a6101be565b005b6101546105d3565b005b34801561016257600080fd5b5061017d60048036038101906101789190610be1565b610877565b60405161018a9190610b20565b60405180910390f35b34801561019f57600080fd5b506101a86108be565b6040516101b59190610af6565b60405180910390f35b670de0b6b3a76400006101fc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ca90919063ffffffff16565b101561023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023490610c6b565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028c9190610cba565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c6576040517fd72551ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104715760008082815481106103eb576103ea610d10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046990610d3f565b9150506103c9565b50600067ffffffffffffffff81111561048d5761048c610d88565b5b6040519080825280602002602001820160405280156104bb5781602001602082028036833780820191505090505b50600090805190602001906104d19291906109a6565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f890610de8565b60006040518083038185875af1925050503d8060008114610535576040519150601f19603f3d011682016040523d82523d6000602084013e61053a565b606091505b505090508061057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590610e49565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610658576040517fd72551ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106db57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610691575b5050505050905060005b815181101561076657600082828151811061070357610702610d10565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075e90610d3f565b9150506106e5565b50600067ffffffffffffffff81111561078257610781610d88565b5b6040519080825280602002602001820160405280156107b05781602001602082028036833780820191505090505b50600090805190602001906107c69291906109a6565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ed90610de8565b60006040518083038185875af1925050503d806000811461082a576040519150601f19603f3d011682016040523d82523d6000602084013e61082f565b606091505b5050905080610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086a90610e49565b60405180910390fd5b5050565b600080828154811061088c5761088b610d10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b670de0b6b3a764000081565b6000806108d683610906565b90506000670de0b6b3a764000082866108ef9190610e69565b6108f99190610ef2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094f57600080fd5b505afa158015610963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109879190610fb0565b5050509150506402540be4008161099e919061102b565b915050919050565b828054828255906000526020600020908101928215610a1f579160200282015b82811115610a1e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c6565b5b509050610a2c9190610a30565b5090565b5b80821115610a49576000816000905550600101610a31565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7d82610a52565b9050919050565b610a8d81610a72565b8114610a9857600080fd5b50565b600081359050610aaa81610a84565b92915050565b600060208284031215610ac657610ac5610a4d565b5b6000610ad484828501610a9b565b91505092915050565b6000819050919050565b610af081610add565b82525050565b6000602082019050610b0b6000830184610ae7565b92915050565b610b1a81610a72565b82525050565b6000602082019050610b356000830184610b11565b92915050565b6000819050919050565b6000610b60610b5b610b5684610a52565b610b3b565b610a52565b9050919050565b6000610b7282610b45565b9050919050565b6000610b8482610b67565b9050919050565b610b9481610b79565b82525050565b6000602082019050610baf6000830184610b8b565b92915050565b610bbe81610add565b8114610bc957600080fd5b50565b600081359050610bdb81610bb5565b92915050565b600060208284031215610bf757610bf6610a4d565b5b6000610c0584828501610bcc565b91505092915050565b600082825260208201905092915050565b7f55206e65656420746f2073656e64206d6f726520455448210000000000000000600082015250565b6000610c55601883610c0e565b9150610c6082610c1f565b602082019050919050565b60006020820190508181036000830152610c8481610c48565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc582610add565b9150610cd083610add565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d0557610d04610c8b565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d4a82610add565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7d57610d7c610c8b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dd2600083610db7565b9150610ddd82610dc2565b600082019050919050565b6000610df382610dc5565b9150819050919050565b7f4661696c65640000000000000000000000000000000000000000000000000000600082015250565b6000610e33600683610c0e565b9150610e3e82610dfd565b602082019050919050565b60006020820190508181036000830152610e6281610e26565b9050919050565b6000610e7482610add565b9150610e7f83610add565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eb857610eb7610c8b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610efd82610add565b9150610f0883610add565b925082610f1857610f17610ec3565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4281610f23565b8114610f4d57600080fd5b50565b600081519050610f5f81610f39565b92915050565b6000819050919050565b610f7881610f65565b8114610f8357600080fd5b50565b600081519050610f9581610f6f565b92915050565b600081519050610faa81610bb5565b92915050565b600080600080600060a08688031215610fcc57610fcb610a4d565b5b6000610fda88828901610f50565b9550506020610feb88828901610f86565b9450506040610ffc88828901610f9b565b935050606061100d88828901610f9b565b925050608061101e88828901610f50565b9150509295509295909350565b600061103682610f65565b915061104183610f65565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110805761107f610c8b565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110bd576110bc610c8b565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110fa576110f9610c8b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561113757611136610c8b565b5b82820290509291505056fea264697066735822122019620283acc0523aa7cf86bc5b25720630a290f60c271c173c184a3ab6a79f2564736f6c63430008080033",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 61,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 65,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 70,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
